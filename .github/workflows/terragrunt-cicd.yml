name: Deploy Infraestructura Terragrunt

on:
  push:
  pull_request:
    branches:
      - staging

env:
  AWS_REGION: us-east-1
  AWS_OIDC_ROLE_ARN: arn:aws:iam::214633882441:role/github-terraform-deployer

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform and Terragrunt
        run: |
          sudo apt-get update && sudo apt-get install -y unzip
          curl -o terraform.zip https://releases.hashicorp.com/terraform/1.7.4/terraform_1.7.4_linux_amd64.zip
          unzip terraform.zip
          sudo mv terraform /usr/local/bin
          curl -o terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v0.50.16/terragrunt_linux_amd64
          sudo chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin

      - name: Planificar infraestructura
        run: |
          cd environments/staging/${{ env.AWS_REGION }}
          terragrunt run-all plan | tee plan.out
        continue-on-error: false

#      - name: Post Plan Comment
#        if: github.event_name == 'pull_request'
#        uses: actions/github-script@v6
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const fs = require('fs');
#            const path = `environments/staging/${{ env.AWS_REGION }}/plan.out`;
#            
#            // Check if file exists and has content
#            if (fs.existsSync(path) && fs.statSync(path).size > 0) {
#              const plan = fs.readFileSync(path, 'utf8');
#              const { data: comments } = await github.rest.issues.listComments({
#                owner: context.repo.owner,
#                repo: context.repo.repo,
#                issue_number: context.payload.pull_request.number,
#              });
#              const botComment = comments.find(comment => comment.user.login === 'github-actions[bot]');
#              if (botComment) {
#                await github.rest.issues.updateComment({
#                  owner: context.repo.owner,
#                  repo: context.repo.repo,
#                  comment_id: botComment.id,
#                  body: `## Terraform Plan\n\n\`\`\`\n${plan}\n\`\`\``,
#                });
#              } else {
#                await github.rest.issues.createComment({
#                  owner: context.repo.owner,
#                  repo: context.repo.repo,
#                  issue_number: context.payload.pull_request.number,
#                  body: `## Terraform Plan\n\n\`\`\`\n${plan}\n\`\`\``,
#                });
#              }
#            } else {
#              console.log('No plan.out file found or the file is empty');
#            }

      - name: Aplicar infraestructura
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd environments/staging/${{ env.AWS_REGION }}
          terragrunt run-all apply --terragrunt-non-interactive plan.out
